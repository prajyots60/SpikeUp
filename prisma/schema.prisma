generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum AttendedTypeEnum {
  REGISTERED
  ATTENDED
  ADDED_TO_CART
  FOLLOW_UP
  BREAKOUT_ROOM
  CONVERTED
}

enum CtaTypeEnum {
  BUY_NOW
  BOOK_A_CALL
}

enum WebinarStatusEnum {
  SCHEDULED
  WAITING_ROOM
  LIVE
  ENDED
  CANCELLED
}

enum CallStatusEnum {
  PENDING
  InProgress
  COMPLETED
}

enum CreatorTypeEnum {
  CONNECTED_STRIPE  // Has own Stripe Connect account
  MANAGED_CREATOR   // Uses platform Stripe account
}

model User {
  id               String          @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name             String          @db.VarChar(100)
  clerkId          String          @unique
  email            String          @unique
  profileImage     String
  webinars         Webinar[]       @relation("PresenterWebinars")
  stripeConnectId  String?         @db.VarChar(255)
  lastLoginAt      DateTime?
  createdAt        DateTime        @default(now())
  updatedAt        DateTime        @updatedAt
  deletedAt        DateTime?
  subscription     Boolean         @default(false)
  stripeCustomerId String?         @db.VarChar(255)
  // New fields for managed creators
  creatorType      CreatorTypeEnum @default(MANAGED_CREATOR)
  isActive         Boolean         @default(true)
  totalEarnings    Decimal         @default(0) @db.Decimal(10, 2)
  pendingBalance   Decimal         @default(0) @db.Decimal(10, 2)
  // Relations
  products         Product[]       @relation("CreatorProducts")
  earnings         Earning[]       @relation("CreatorEarnings")
  payouts          Payout[]        @relation("CreatorPayouts")

  @@index([email])
  @@index([clerkId])
  @@index([creatorType])
}

model Webinar {
  id              String            @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  title           String            @db.VarChar(255)
  description     String?           @db.Text
  startTime       DateTime
  endTime         DateTime?
  duration        Int               @default(0) // Duration in minutes
  webinarStatus   WebinarStatusEnum @default(SCHEDULED)
  presenterId     String            @db.Uuid
  presenter       User              @relation("PresenterWebinars", fields: [presenterId], references: [id], onDelete: Cascade)
  attendances     Attendance[]
  tags            String[]
  ctaLabel        String?           @db.VarChar(50)
  ctaType         CtaTypeEnum
  ctaUrl          String?           @db.VarChar(255)
  couponCode      String?           @db.VarChar(50)
  couponEnabled   Boolean           @default(false)
  couponExpiry    DateTime?
  lockChat        Boolean           @default(false)
  stripeProductId String?           @db.VarChar(255)
  aiAgentId       String?           @db.Uuid
  priceId         String?           @db.VarChar(255)
  recordingUrl    String?
  recordingKey    String?           @db.VarChar(500)
  thumbnail       String?
  thumbnailKey    String?           @db.VarChar(500)
  isPreRecorded   Boolean           @default(false)
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  deletedAt       DateTime?
  Attendee        Attendee?         @relation(fields: [attendeeId], references: [id])
  attendeeId      String?           @db.Uuid

  @@index([presenterId])
  @@index([aiAgentId])
  @@index([startTime])
}

model Attendee {
  id         String         @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  email      String         @unique
  name       String         @db.VarChar(100)
  phone      String         @default("") @db.VarChar(30)
  callStatus CallStatusEnum @default(PENDING)
  Attendance Attendance[]
  Webinar    Webinar[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Attendance {
  id           String           @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  webinarId    String           @db.Uuid
  joinedAt     DateTime         @default(now())
  leftAt       DateTime?
  user         Attendee         @relation(fields: [attendeeId], references: [id])
  webinar      Webinar          @relation(fields: [webinarId], references: [id], onDelete: Cascade)
  attendedType AttendedTypeEnum
  createdAt    DateTime         @default(now())
  updatedAt    DateTime         @updatedAt
  attendeeId   String           @db.Uuid
  userId       String?          @db.Uuid

  @@unique([attendeeId, webinarId]) // âœ… This enforces 1 attendee per webinar
  @@index([webinarId])
  @@index([attendedType])
}

// New models for managed creators and earnings tracking
model Product {
  id              String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name            String    @db.VarChar(255)
  description     String?   @db.Text
  stripeProductId String    @db.VarChar(255)
  stripePriceId   String?   @db.VarChar(255)
  price           Decimal   @db.Decimal(10, 2)
  currency        String    @default("usd") @db.VarChar(3)
  isActive        Boolean   @default(true)
  creatorId       String    @db.Uuid
  creator         User      @relation("CreatorProducts", fields: [creatorId], references: [id], onDelete: Cascade)
  earnings        Earning[] @relation("ProductEarnings")
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  @@index([creatorId])
  @@index([stripeProductId])
  @@index([isActive])
}

model Earning {
  id                String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  amount            Decimal  @db.Decimal(10, 2)
  currency          String   @default("usd") @db.VarChar(3)
  platformFee       Decimal  @default(0) @db.Decimal(10, 2)
  netAmount         Decimal  @db.Decimal(10, 2) // amount - platformFee
  stripePaymentId   String?  @db.VarChar(255)
  stripeSessionId   String?  @db.VarChar(255)
  productId         String?  @db.Uuid
  product           Product? @relation("ProductEarnings", fields: [productId], references: [id])
  creatorId         String   @db.Uuid
  creator           User     @relation("CreatorEarnings", fields: [creatorId], references: [id], onDelete: Cascade)
  webinarId         String?  @db.Uuid
  attendeeId        String?  @db.Uuid
  isPaid            Boolean  @default(false)
  paidAt            DateTime?
  payoutId          String?  @db.Uuid
  payout            Payout?  @relation("PayoutEarnings", fields: [payoutId], references: [id])
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  @@index([creatorId])
  @@index([productId])
  @@index([isPaid])
  @@index([stripePaymentId])
}

model Payout {
  id              String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  amount          Decimal   @db.Decimal(10, 2)
  currency        String    @default("usd") @db.VarChar(3)
  method          String    @default("manual") @db.VarChar(50) // manual, stripe_transfer, bank_transfer
  status          String    @default("pending") @db.VarChar(50) // pending, processing, completed, failed
  stripeTransferId String?  @db.VarChar(255)
  creatorId       String    @db.Uuid
  creator         User      @relation("CreatorPayouts", fields: [creatorId], references: [id], onDelete: Cascade)
  earnings        Earning[] @relation("PayoutEarnings")
  notes           String?   @db.Text
  processedAt     DateTime?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  @@index([creatorId])
  @@index([status])
  @@index([processedAt])
}
